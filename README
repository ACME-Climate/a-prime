Python based scripts to generate ACME Coupled Priority Metrics 


Getting started using the conda package:

   Create a new anaconda environment (requires having anaconda or
   miniconda installed):
     conda create -n a-prime -c e3sm python=2 a-prime
     source activate a-prime
   Copy the a-prime template run script (run_aprime.bash) to the
   current directory:
     get_aprime_template

Getting started with an E3SM-Unified environment:

   Load E3SM-Unified on the machine, e.g.:
     module load e3sm-unified/1.1.3
   Copy the a-prime template run script (run_aprime.bash) to the
   current directory:
     get_aprime_template
     
Getting started using GitHub repo:

   Clone ACME a-prime repository:
     git clone https://github.com/ACME-Climate/a-prime

About MPAS-Analysis:

   MPAS-Analysis is loaded as a git submodule and this is done
   for the user in the run_aprime driver. There is only one
   circumstance in which the user has to load the submodule
   manually, and that is when he/she wants to run aprime in
   batch mode *and* the submodule has never been cloned before.
   In that case, do the following:
     cd a-prime/python/MPAS-Analysis
     git submodule update --init
   An alternative to this is to run a-prime on the login node
   for the first time, so that the git submodule is initialized
   for the user inside the driver.

About conda and other environment issues:

   The user needs to load an anaconda environment.  This
   environment should include all dependencies of a-prime:
     - python
     - mpas_analysis ==0.7.0
     - nco >=4.7.0
     - numpy
     - scipy
     - matplotlib
     - sympy
     - netCDF4

   The easiest way to do this is to use an environment where the
   e3sm-unified (>= 1.1.3) or a-prime conda packages have been
   installed.

   Note: run_aprime.bash loaded an anaconda environment itself in
   v 1.1 and earlier but this has been changed because a-prime is
   now optionally *included* in the anaconda environment.

Supported machines as of Mar 2018:
   1) edison/cori
   2) titan/rhea
   3) acme1/aims4
   3) anvil/blues

About batch mode:

   As of September 2017, it is available on edison and titan.

Main steps to run aprime:

I. Copy the template script run_aprime.bash to a user version
   (e.g. run_aprime_$user.bash)

II. Set case specific variables in driver (run_aprime_$user.bash)
    script. See driver for more instructions on this.

III. Execute driver script (e.g. "run_aprime_$user.bash") to run
     the diagnostics and create an html file.



NOTES ABOUT SOFTWARE DESIGN:

1. The script is flexible and extensible, meaning it is easy to add 
   more variables and observational datasets to the current set.

2. Climatology diagnostics variables and their details are listed in the bash_scripts/ files:
	 var_list_model_vs_model_climo.bash	For model vs. model comparisons
	 var_list_model_vs_obs_climo.bash	For model vs. obs comparisons
   Time Series diagnostics variables and their details are listed in the files:
	 var_list_model_vs_model_time_series.bash	For model vs. model comparisons
	 var_list_model_vs_obs_time_series.bash		For model vs. model comparisons
	
   These lists can be easily extended to include other variables as needed,
   simply by adding their details in the format used in the files. 

3. Multiple cases can be compared against a ref_case simultaneously, each comparison generating its own webpage.
   In the works!

4. The scripts generate separate log files for each step, making it easy to debug

5. Several intermediary data files are written at various steps, making it easy to debugs

6. The data files used for making the plots are also saved.


Things to do:

1. Accelerate code by harnessing parallelism further by submitting more jobs in the background
2. Remove redundancies
3. Generate mapping files for T85 and T341 (high res project) runs.
